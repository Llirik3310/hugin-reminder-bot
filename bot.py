
import asyncio
import logging
import json
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.markdown import hbold

import os

API_TOKEN = os.getenv("API_TOKEN")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN, parse_mode=ParseMode.MARKDOWN)
dp = Dispatcher(storage=MemoryStorage())

reminders = []

def load_reminders():
    global reminders
    try:
        with open("reminders.json", "r") as f:
            reminders = json.load(f)
    except FileNotFoundError:
        reminders = []

def save_reminders():
    with open("reminders.json", "w") as f:
        json.dump(reminders, f)

@dp.message(commands=["start"])
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —è –•—É–≥–∏–Ω üê¶\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã—Ç—å –≤–∞–∂–Ω–æ–µ.\n\n–ö–æ–º–∞–Ω–¥—ã:\n/add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n/list ‚Äî —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π")

@dp.message(commands=["add"])
async def cmd_add(message: Message):
    await message.answer("–ù–∞–ø–∏—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`26.03.2025 17:00 –ü–æ–∑–≤–æ–Ω–∏—Ç—å –ê–Ω–µ`")

@dp.message()
async def process_message(message: Message):
    if len(message.text.split(" ")) >= 3 and message.text[:10].count(".") == 2:
        try:
            parts = message.text.split(" ", 2)
            date_str, time_str, text = parts
            remind_at = datetime.strptime(f"{date_str} {time_str}", "%d.%m.%Y %H:%M")
            reminders.append({
                "chat_id": message.chat.id,
                "text": text,
                "time": remind_at.strftime("%Y-%m-%d %H:%M")
            })
            save_reminders()
            await message.answer(f"–ó–∞–ø–æ–º–Ω–∏–ª! –ù–∞–ø–æ–º–Ω—é {date_str} –≤ {time_str} üïí")
        except Exception:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
    else:
        await message.answer("–Ø –Ω–µ –ø–æ–Ω—è–ª. –ò—Å–ø–æ–ª—å–∑—É–π /add –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")

@dp.message(commands=["list"])
async def cmd_list(message: Message):
    user_reminders = [r for r in reminders if r["chat_id"] == message.chat.id]
    if not user_reminders:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return
    msg = "\n".join([f"{r['time']} ‚Äî {r['text']}" for r in user_reminders])
    await message.answer(f"–¢–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n{msg}")

async def reminder_loop():
    while True:
        now = datetime.now().strftime("%Y-%m-%d %H:%M")
        to_send = [r for r in reminders if r["time"] == now]
        for r in to_send:
            try:
                await bot.send_message(r["chat_id"], f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {r['text']}")
                reminders.remove(r)
                save_reminders()
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", e)
        await asyncio.sleep(60)

async def main():
    load_reminders()
    asyncio.create_task(reminder_loop())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
